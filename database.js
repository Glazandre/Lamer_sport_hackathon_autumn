// JSON –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª–∏–∞—Ç–ª–æ–Ω–∞
class PolyathlonDatabase {
    constructor() {
        this.storageKey = 'polyathlon_data';
        this.data = this.loadData();
        this.setupImportListener();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    loadData() {
        try {
            const saved = localStorage.getItem(this.storageKey);
            if (saved) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
                return JSON.parse(saved);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        console.log('üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ');
        return this.getDemoData();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
    saveData() {
        try {
            localStorage.setItem(this.storageKey, JSON.stringify(this.data));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error');
            return false;
        }
    }

    // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    getDemoData() {
        return {
            // participants: [
            //     {
            //         id: 1,
            //         number: 101,
            //         full_name: '–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á',
            //         birth_date: '1995-03-15',
            //         gender: 'male',
            //         category: 'men',
            //         organization: '–°–ö "–°–ø–∞—Ä—Ç–∞–∫"',
            //         region: '–ú–æ—Å–∫–≤–∞',
            //         contact_phone: '+7-915-111-11-11',
            //         email: 'ivanov@mail.ru',
            //         created_at: new Date().toISOString()
            //     },
            //     {
            //         id: 2,
            //         number: 102,
            //         full_name: '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
            //         birth_date: '1998-07-22',
            //         gender: 'female',
            //         category: 'women',
            //         organization: '–î–Æ–°–® "–ó–∞—Ä—è"',
            //         region: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            //         contact_phone: '+7-915-222-22-22',
            //         email: 'petrova@mail.ru',
            //         created_at: new Date().toISOString()
            //     },
            //     {
            //         id: 3,
            //         number: 103,
            //         full_name: '–°–∏–¥–æ—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤–∏—á',
            //         birth_date: '1996-11-30',
            //         gender: 'male',
            //         category: 'men',
            //         organization: '–¶–°–ü "–û–ª–∏–º–ø"',
            //         region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            //         contact_phone: '+7-915-333-33-33',
            //         email: 'sidorov@mail.ru',
            //         created_at: new Date().toISOString()
            //     }
            // ],
            results: [
                {
                    id: 1,
                    participant_id: 1,
                    discipline: 'running-100m',
                    result_value: 12.5,
                    result_text: '12.5 —Å–µ–∫',
                    points: 85,
                    created_at: new Date().toISOString()
                },
                {
                    id: 2,
                    participant_id: 1,
                    discipline: 'swimming-100m',
                    result_value: 68.2,
                    result_text: '1:08.2',
                    points: 88,
                    created_at: new Date().toISOString()
                },
                {
                    id: 3,
                    participant_id: 2,
                    discipline: 'running-100m',
                    result_value: 13.8,
                    result_text: '13.8 —Å–µ–∫',
                    points: 80,
                    created_at: new Date().toISOString()
                },
                {
                    id: 4,
                    participant_id: 2,
                    discipline: 'swimming-100m',
                    result_value: 75.1,
                    result_text: '1:15.1',
                    points: 82,
                    created_at: new Date().toISOString()
                },
                {
                    id: 5,
                    participant_id: 3,
                    discipline: 'running-100m',
                    result_value: 12.8,
                    result_text: '12.8 —Å–µ–∫',
                    points: 84,
                    created_at: new Date().toISOString()
                },
                {
                    id: 6,
                    participant_id: 3,
                    discipline: 'swimming-100m',
                    result_value: 70.5,
                    result_text: '1:10.5',
                    points: 86,
                    created_at: new Date().toISOString()
                }
            ],
            disciplines: [
                {
                    id: 1,
                    name: '–ë–µ–≥ 100 –º',
                    code: 'running-100m',
                    description: '–°–ø—Ä–∏–Ω—Ç–µ—Ä—Å–∫–∏–π –±–µ–≥ –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤',
                    measurement_unit: '—Å–µ–∫—É–Ω–¥—ã',
                    scoring_type: 'time'
                },
                {
                    id: 2,
                    name: '–ë–µ–≥ 1000 –º',
                    code: 'running-1000m',
                    description: '–ë–µ–≥ –Ω–∞ —Å—Ä–µ–¥–Ω—é—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é 1000 –º–µ—Ç—Ä–æ–≤',
                    measurement_unit: '—Å–µ–∫—É–Ω–¥—ã',
                    scoring_type: 'time'
                },
                {
                    id: 3,
                    name: '–ü–ª–∞–≤–∞–Ω–∏–µ 100 –º',
                    code: 'swimming-100m',
                    description: '–ü–ª–∞–≤–∞–Ω–∏–µ –≤–æ–ª—å–Ω—ã–º —Å—Ç–∏–ª–µ–º –Ω–∞ 100 –º–µ—Ç—Ä–æ–≤',
                    measurement_unit: '—Å–µ–∫—É–Ω–¥—ã',
                    scoring_type: 'time'
                },
                {
                    id: 4,
                    name: '–°—Ç—Ä–µ–ª—å–±–∞',
                    code: 'shooting',
                    description: '–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–∏–Ω—Ç–æ–≤–∫–∏',
                    measurement_unit: '–æ—á–∫–∏',
                    scoring_type: 'points'
                },
                {
                    id: 5,
                    name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è',
                    code: 'pull-ups',
                    description: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–∫–ª–∞–¥–∏–Ω–µ',
                    measurement_unit: '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    scoring_type: 'points'
                }
            ],
            teams: [
                {
                    id: 1,
                    name: '–°–ø–∞—Ä—Ç–∞–∫',
                    organization: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–± "–°–ø–∞—Ä—Ç–∞–∫"',
                    region: '–ú–æ—Å–∫–≤–∞',
                    coach_name: '–ö—É–∑–Ω–µ—Ü–æ–≤ –ê–Ω–¥—Ä–µ–π –°–µ—Ä–≥–µ–µ–≤–∏—á',
                    contact_phone: '+7-916-123-45-67'
                },
                {
                    id: 2,
                    name: '–ó–∞—Ä—è',
                    organization: '–î–Æ–°–® "–ó–∞—Ä—è"',
                    region: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
                    coach_name: '–ü–µ—Ç—Ä–æ–≤–∞ –û–ª—å–≥–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞',
                    contact_phone: '+7-916-234-56-78'
                }
            ],
            official_documents: [
                {
                    id: 1,
                    title: '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ –ø–æ–ª–∏–∞—Ç–ª–æ–Ω—É',
                    description: '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–µ–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—é–∑–∞ –ø–æ–ª–∏–∞—Ç–ª–æ–Ω–∞ 28 –æ–∫—Ç—è–±—Ä—è 2016 –≥–æ–¥–∞',
                    file_path: '/documents/rules.pdf',
                    file_type: 'PDF'
                },
                {
                    id: 2,
                    title: '–†–µ–≥–ª–∞–º–µ–Ω—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π',
                    description: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π',
                    file_path: '/documents/regulations.pdf',
                    file_type: 'PDF'
                }
            ],
            lastId: {
                participants: 3,
                results: 6,
                disciplines: 5,
                teams: 2,
                official_documents: 2
            }
        };
    }

    // –£—á–∞—Å—Ç–Ω–∏–∫–∏
    getAllParticipants() {
        return this.data.participants || [];
    }

    addParticipant(participantData) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤ participants —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.data.participants) {
            this.data.participants = [];
        }

        const newId = ++this.data.lastId.participants;
        const participantNumber = 0 + this.data.participants.length + 1;

        const participant = {
            id: newId,
            number: participantNumber,
            ...participantData,
            created_at: new Date().toISOString()
        };

        this.data.participants.push(participant);
        this.saveData();
        return participant;
    }

    deleteParticipant(participantId) {
        this.data.participants = this.data.participants.filter(p => p.id !== participantId);
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        this.data.results = this.data.results.filter(r => r.participant_id !== participantId);
        this.saveData();
    }

    getParticipant(participantId) {
        return this.data.participants.find(p => p.id === participantId);
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    getAllResults() {
        return this.data.results || [];
    }

    addResult(resultData) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–∞—Å—Å–∏–≤ results —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!this.data.results) {
            this.data.results = [];
        }

        const newId = ++this.data.lastId.results;

        const result = {
            id: newId,
            ...resultData,
            created_at: new Date().toISOString()
        };

        this.data.results.push(result);
        this.saveData();
        return result;
    }

    deleteResult(resultId) {
        this.data.results = this.data.results.filter(r => r.id !== resultId);
        this.saveData();
    }

    getResultsByParticipant(participantId) {
        return (this.data.results || []).filter(r => r.participant_id === participantId);
    }

    getResultsByDiscipline(disciplineCode) {
        return (this.data.results || []).filter(r => r.discipline === disciplineCode);
    }

    // –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    getAllDisciplines() {
        return this.data.disciplines || [];
    }

    getDiscipline(disciplineCode) {
        return (this.data.disciplines || []).find(d => d.code === disciplineCode);
    }

    // –ö–æ–º–∞–Ω–¥—ã
    getAllTeams() {
        return this.data.teams || [];
    }

    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    getAllDocuments() {
        return this.data.official_documents || [];
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    getStats() {
        return {
            participants: (this.data.participants || []).length,
            results: (this.data.results || []).length,
            teams: (this.data.teams || []).length,
            disciplines: (this.data.disciplines || []).length
        };
    }

    // –†–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    calculateRating(categoryFilter = 'all') {
        const participants = categoryFilter === 'all'
            ? (this.data.participants || [])
            : (this.data.participants || []).filter(p => p.category === categoryFilter);

        return participants.map(participant => {
            const participantResults = (this.data.results || []).filter(r => r.participant_id === participant.id);
            const totalPoints = participantResults.reduce((sum, result) => sum + (result.points || 0), 0);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º
            const runningResult = participantResults.find(r => r.discipline === 'running-100m');
            const swimmingResult = participantResults.find(r => r.discipline === 'swimming-100m');
            const shootingResult = participantResults.find(r => r.discipline === 'shooting');
            const pullupsResult = participantResults.find(r => r.discipline === 'pull-ups');

            return {
                participant: participant,
                totalPoints: totalPoints,
                results: {
                    running: runningResult,
                    swimming: swimmingResult,
                    shooting: shootingResult,
                    pullups: pullupsResult
                }
            };
        }).sort((a, b) => b.totalPoints - a.totalPoints);
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    exportData() {
        const dataStr = JSON.stringify(this.data, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = `polyathlon_data_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        return true;
    }

    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    importData(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const importedData = JSON.parse(e.target.result);

                    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if (!importedData.participants) {
                        importedData.participants = [];
                    }
                    if (!importedData.results) {
                        importedData.results = [];
                    }

                    this.data = importedData;
                    this.saveData();
                    resolve(true);
                } catch (error) {
                    reject(error);
                }
            };
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsText(file);
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –∏–º–ø–æ—Ä—Ç–∞
    setupImportListener() {
        const importFile = document.getElementById('import-file');
        if (importFile) {
            importFile.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    this.importData(file).then(() => {
                        this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
                        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                        setTimeout(() => location.reload(), 1000);
                    }).catch(error => {
                        this.showNotification(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`, 'error');
                    });
                }
            });
        }
    }

    // –°–±—Ä–æ—Å –∫ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º
    resetToDemoData() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏.')) {
            this.data = this.getDemoData();
            this.saveData();
            this.showNotification('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏!', 'success');
            setTimeout(() => location.reload(), 1000);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification(message, type = 'success') {
        const notification = document.getElementById('notification');
        if (notification) {
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ CSV —Å —Ä—É—Å—Å–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ CSV
    generateFullReport() {
        const participants = this.getAllParticipants();
        const results = this.getAllResults();
        const teams = this.getAllTeams();
        const rating = this.calculateRating('all');
        const disciplines = this.getAllDisciplines();

        let csv = '\uFEFF'; // BOM –¥–ª—è UTF-8

        // === –ó–ê–ì–û–õ–û–í–û–ö –û–¢–ß–ï–¢–ê ===
        csv += '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –°–æ—é–∑ –ü–æ–ª–∏–∞—Ç–ª–æ–Ω–∞\n';
        csv += '–û–¢–ß–ï–¢ –≥–ª–∞–≤–Ω–æ–≥–æ —Å—É–¥—å–∏\n\n';

        csv += '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è;–ü–æ–ª–∏–∞—Ç–ª–æ–Ω\n';
        csv += '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è;–ô–æ—à–∫–∞—Ä-–û–ª–∞, –†–æ—Å—Å–∏—è\n';
        csv += '–î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è;28.10.2005\n';
        csv += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥;${teams.length}\n`;
        csv += `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤;${participants.length}\n`;
        csv += `–ú—É–∂—á–∏–Ω—ã;${participants.filter(p => p.gender === 'male').length}\n`;
        csv += `–ñ–µ–Ω—â–∏–Ω—ã;${participants.filter(p => p.gender === 'female').length}\n\n\n`;

        // === –ò–¢–û–ì–û–í–´–ô –ü–†–û–¢–û–ö–û–õ ===
        csv += '–ò–¢–û–ì–û–í–´–ô –ü–†–û–¢–û–ö–û–õ –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô\n';
        csv += '‚Ññ;–§–ò–û;‚Ññ —É—á–∞—Å—Ç–Ω–∏–∫–∞;–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è;–ö–∞—Ç–µ–≥–æ—Ä–∏—è;';

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        disciplines.forEach(discipline => {
            csv += `${discipline.name};`;
        });
        csv += '–°—É–º–º–∞ –±–∞–ª–ª–æ–≤;–ú–µ—Å—Ç–æ\n';

        // –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        rating.forEach((item, index) => {
            const participant = item.participant;

            // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            csv += `${index + 1};`;
            csv += `"${participant.full_name}";`;
            csv += `${participant.number};`;
            csv += `"${participant.organization}";`;
            csv += `"${this.getCategoryText(participant.category)}";`;

            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º
            disciplines.forEach(discipline => {
                const result = item.results[this.getDisciplineField(discipline.code)];
                csv += `${result ? result.result_text : "-"};`;
            });

            // –ò—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–ª—ã –∏ –º–µ—Å—Ç–æ
            csv += `${item.totalPoints};`;
            csv += `${index + 1}\n`;
        });

        csv += '\n\n';

        // === –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===
        csv += '–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –î–ò–°–¶–ò–ü–õ–ò–ù–ê–ú\n';
        csv += '–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞;–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞;‚Ññ —É—á–∞—Å—Ç–Ω–∏–∫–∞;–†–µ–∑—É–ª—å—Ç–∞—Ç;–ë–∞–ª–ª—ã;–î–∞—Ç–∞\n';

        disciplines.forEach(discipline => {
            const disciplineResults = this.getResultsByDiscipline(discipline.code);
            disciplineResults.forEach(result => {
                const participant = this.getParticipant(result.participant_id);
                if (participant) {
                    const date = new Date(result.created_at);
                    const formattedDate = `${date.getDate().toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()}`;

                    csv += `"${discipline.name}";`;
                    csv += `"${participant.full_name}";`;
                    csv += `${participant.number};`;
                    csv += `${result.result_text};`;
                    csv += `${result.points || 0};`;
                    csv += `${formattedDate}\n`;
                }
            });
        });

        csv += '\n\n';

        // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
        csv += '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–†–ï–í–ù–û–í–ê–ù–ò–ô\n';
        csv += '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å;–ó–Ω–∞—á–µ–Ω–∏–µ\n';
        csv += `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤;${participants.length}\n`;
        csv += `–ú—É–∂—á–∏–Ω—ã;${participants.filter(p => p.gender === 'male').length}\n`;
        csv += `–ñ–µ–Ω—â–∏–Ω—ã;${participants.filter(p => p.gender === 'female').length}\n`;
        csv += `–Æ–Ω–∏–æ—Ä—ã;${participants.filter(p => p.category === 'juniors').length}\n`;
        csv += `–í–µ—Ç–µ—Ä–∞–Ω—ã;${participants.filter(p => p.category === 'veterans').length}\n`;
        csv += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥;${teams.length}\n`;
        csv += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω;${disciplines.length}\n`;
        csv += `–í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤;${results.length}\n`;

        const avgPoints = rating.length > 0 ?
            Math.round(rating.reduce((sum, item) => sum + item.totalPoints, 0) / rating.length) : 0;
        csv += `–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞;${avgPoints}\n`;

        const bestResult = rating.length > 0 ? rating[0].totalPoints : 0;
        csv += `–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç;${bestResult}\n`;

        return csv;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
    getDisciplineField(disciplineCode) {
        const fields = {
            'running-100m': 'running',
            'swimming-100m': 'swimming',
            'shooting': 'shooting',
            'pull-ups': 'pullups'
        };
        return fields[disciplineCode] || disciplineCode;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    exportFullReport() {
        try {
            const csvData = this.generateFullReport();

            // –°–æ–∑–¥–∞–µ–º Blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-type
            const blob = new Blob([csvData], {
                type: 'text/csv;charset=utf-8'
            });

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = '–û—Ç—á–µ—Ç_–ü–æ–ª–∏–∞—Ç–ª–æ–Ω_–ô–æ—à–∫–∞—Ä-–û–ª–∞_28.10.2005.csv';
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            setTimeout(() => URL.revokeObjectURL(url), 100);

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞', 'error');
            return false;
        }
    }
    // –ú–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    exportFullReport() {
        try {
            const csvData = this.generateFullReport();

            // –°–æ–∑–¥–∞–µ–º Blob —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME-type
            const blob = new Blob([csvData], {
                type: 'text/csv;charset=utf-8'
            });

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            link.download = '–û—Ç—á–µ—Ç_–ü–æ–ª–∏–∞—Ç–ª–æ–Ω_–ô–æ—à–∫–∞—Ä-–û–ª–∞_28.10.2005.csv';
            link.style.display = 'none';

            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            setTimeout(() => URL.revokeObjectURL(url), 100);

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞', 'error');
            return false;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategoryText(category) {
        const categories = {
            'men': '–ú—É–∂—á–∏–Ω—ã',
            'women': '–ñ–µ–Ω—â–∏–Ω—ã',
            'juniors': '–Æ–Ω–∏–æ—Ä—ã',
            'veterans': '–í–µ—Ç–µ—Ä–∞–Ω—ã'
        };
        return categories[category] || category;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const database = new PolyathlonDatabase();